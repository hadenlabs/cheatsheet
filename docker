## docker

* Manage Docker containers and images.
* More information: <https://docs.docker.com/engine/reference/commandline/cli/>.

### List currently running docker containers:

docker ps

### List all docker containers (running and stopped):

docker ps -a

### Start a container from an image, with a custom name:

docker run --name <container_name> <image>

### Start or stop an existing container:

docker <start|stop> <container_name>

### Open a shell inside of an already running container:

docker exec -it <container_name> <sh>


### List all images that are locally stored with the Docker engine

docker images

### Build an image from the Dockerfile in the current directory and tag the image

docker build -t <image>:<version> .

### Pull an image from a registry

docker pull <image>:<version>

### Stop a running container through SIGTERM

docker stop <container_id>

### Stop a running container through SIGKILL

docker kill <container_id>

### Delete all running and stopped containers

docker rm -f $(docker ps -aq)

### Remove a stopped container:

docker rm <container_name>

### Remove an image

docker image rm <image_id>

### Delete an image from the local image store

docker rmi <image_id>

### Clean none/dangling images

docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

### Force clean none/dangling images

docker rmi $(docker images --filter "dangling=true" -q --no-trunc) -f

### Create a new bash process inside the container and connect it to the terminal

docker exec -it <container_id> bash

### docker logs

#### Fetch and follow the logs of a container:

docker logs -f <container_id>

#### Print the last lines of a container's logs

docker logs --tail 100 <container_id> | less

#### Print the last lines of a container's logs and following its logs

docker logs --tail 100 <container_id> -f

### Network

#### List the networks
docker network ls

#### Create new network
docker network create <network_name>
