# tcpdump

> Dump traffic on a network.
> More information: <https://www.tcpdump.org>.

## List available network interfaces:

tcpdump -D

## Capture the traffic of a specific interface:

tcpdump -i {{eth0}}

## Capture all TCP traffic showing contents (ASCII) in console:

tcpdump -A tcp

## Capture the traffic from or to a host:

tcpdump host {{www.example.com}}

## Capture the traffic from a specific interface, source, destination and destination port:

tcpdump -i {{eth0}} src {{192.168.1.1}} and dst {{192.168.1.2}} and dst port {{80}}

## Capture the traffic of a network:

tcpdump net {{192.168.1.0/24}}

## Capture all traffic except traffic over port 22 and save to a dump file:

tcpdump -w {{dumpfile.pcap}} port not {{22}}

## Read from a given dump file:

tcpdump -r {{dumpfile.pcap}}

#More complex statements can be formed with the use of logical operators: and(&&), or(||), not(!)
#Examples:

#Capture all traffic from 192.168.1.10 with destination port 80 (with verbose output)

tcpdump -nnvvS and src 192.168.1.10 and dst port 80

#Capture traffic originating from the 172.16.0.0/16 network with destination network 192.168.1.0/24 or 10.0.0.0/8
tcpdump src net 172.16.0.0/16 and dst net 192.168.1.0/24 or 10.0.0.0/8

#Capture all traffic originating from host H1 that isn't going to port 53
tcpdump src H1 and not dst port 22

#With some complex queries you may have to use single quotes to ignore special characters, namely parentheses
#Capture traffic from 192.168.1.1 that is destined for ports 80 and 21
tcpdump 'src 192.168.1.1 and (dst port 80 or 21)'
